import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { isDemoMode, getDemoProject } from '@/lib/demo-data'

// クライアントサイドで使用するための簡易ZIP作成（実際の実装では適切なライブラリを使用）
function createSimpleZip(files: Array<{ path: string; content: string }>): Uint8Array {
  // 簡易的なTARファイル形式で返す（実際のZIP圧縮は後で実装）
  const encoder = new TextEncoder()
  const fileData: string[] = []
  
  files.forEach(file => {
    fileData.push(`--- ${file.path} ---\n${file.content}\n\n`)
  })
  
  return encoder.encode(fileData.join(''))
}

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params

    // デモモードチェック
    if (isDemoMode()) {
      const project = getDemoProject(id)
      if (!project || !project.generated_code) {
        return NextResponse.json(
          { error: 'Project not found or code not generated' },
          { status: 404 }
        )
      }

      // デモプロジェクトのファイルを準備
      const files: Array<{ path: string; content: string }> = []
      
      // package.json
      if (project.generated_code.package_json) {
        files.push({
          path: 'package.json',
          content: JSON.stringify(project.generated_code.package_json, null, 2)
        })
      }

      // database schema
      if (project.generated_code.database_schema) {
        files.push({
          path: 'database/schema.sql',
          content: project.generated_code.database_schema
        })
      }

      // ファイル構造から追加
      if (project.generated_code.file_structure) {
        project.generated_code.file_structure.forEach((item: any) => {
          if (item.type === 'file' && item.content) {
            files.push({
              path: item.path,
              content: item.content
            })
          }
        })
      }

      // README.md
      files.push({
        path: 'README.md',
        content: `# ${project.title}

${project.description}

## セットアップ

\`\`\`bash
npm install
npm run dev
\`\`\`

## 機能

${project.features || ''}

## 技術スタック

${project.tech_requirements || ''}

---

Generated by SaaS Factory
`
      })

      // .env.example
      files.push({
        path: '.env.example',
        content: `# Database
DATABASE_URL=

# Authentication
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=

# API Keys
# Add your API keys here
`
      })

      // .gitignore
      files.push({
        path: '.gitignore',
        content: `node_modules/
.env
.env.local
.next/
dist/
build/
*.log
.DS_Store
`
      })

      // 簡易ZIPを作成
      const zipContent = createSimpleZip(files)
      
      return new NextResponse(zipContent, {
        headers: {
          'Content-Type': 'application/octet-stream',
          'Content-Disposition': `attachment; filename="${project.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}.tar"`
        }
      })
    }

    // 実際のSupabaseから取得
    const supabase = await createClient()
    
    const { data: project, error } = await supabase
      .from('projects')
      .select('*')
      .eq('id', id)
      .single()

    if (error || !project || !project.generated_code) {
      return NextResponse.json(
        { error: 'Project not found or code not generated' },
        { status: 404 }
      )
    }

    // 実際のプロジェクトファイルを準備
    const files: Array<{ path: string; content: string }> = []
    
    // プロジェクトのファイルを準備（デモと同様の処理）
    // ... (同様の処理)

    const zipContent = createSimpleZip(files)
    
    return new NextResponse(zipContent, {
      headers: {
        'Content-Type': 'application/octet-stream',
        'Content-Disposition': `attachment; filename="${project.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}.tar"`
      }
    })

  } catch (error) {
    console.error('Download error:', error)
    return NextResponse.json(
      { error: 'Failed to download project' },
      { status: 500 }
    )
  }
}