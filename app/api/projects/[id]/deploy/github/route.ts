import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { isDemoMode, getDemoProject } from '@/lib/demo-data'

interface GitHubCreateRepoRequest {
  name: string
  description?: string
  private?: boolean
  auto_init?: boolean
}

interface GitHubFile {
  path: string
  content: string
}

async function createGitHubRepository(
  token: string,
  repoName: string,
  description: string
): Promise<{ success: boolean; data?: any; error?: string }> {
  try {
    const response = await fetch('https://api.github.com/user/repos', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: repoName,
        description: description,
        private: false,
        auto_init: false, // 初期化は後でファイルを追加するため無効
      } as GitHubCreateRepoRequest)
    })

    if (!response.ok) {
      const error = await response.json()
      return { 
        success: false, 
        error: error.message || 'Failed to create repository' 
      }
    }

    const data = await response.json()
    return { success: true, data }
  } catch (error) {
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    }
  }
}

async function uploadFilesToGitHub(
  token: string,
  owner: string,
  repo: string,
  files: GitHubFile[]
): Promise<{ success: boolean; error?: string }> {
  try {
    // ファイルを一つずつアップロード
    for (const file of files) {
      const content = Buffer.from(file.content).toString('base64')
      
      const response = await fetch(
        `https://api.github.com/repos/${owner}/${repo}/contents/${file.path}`,
        {
          method: 'PUT',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message: `Add ${file.path}`,
            content: content,
            branch: 'main'
          })
        }
      )

      if (!response.ok) {
        const error = await response.json()
        console.error(`Failed to upload ${file.path}:`, error)
        // Continue with other files even if one fails
      }
    }

    return { success: true }
  } catch (error) {
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    }
  }
}

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params
    const body = await request.json()
    const { githubToken, repoName } = body

    if (!githubToken) {
      return NextResponse.json(
        { error: 'GitHub token is required' },
        { status: 400 }
      )
    }

    // デモモードチェック
    if (isDemoMode()) {
      const project = getDemoProject(id)
      if (!project) {
        return NextResponse.json(
          { error: 'Project not found' },
          { status: 404 }
        )
      }

      // デモモードでは実際のリポジトリを作成せず、成功レスポンスを返す
      return NextResponse.json({
        success: true,
        repository: {
          name: repoName || project.title.toLowerCase().replace(/[^a-z0-9]/g, '-'),
          full_name: `demo-user/${repoName || project.title.toLowerCase().replace(/[^a-z0-9]/g, '-')}`,
          html_url: `https://github.com/demo-user/${repoName || project.title.toLowerCase().replace(/[^a-z0-9]/g, '-')}`,
          clone_url: `https://github.com/demo-user/${repoName || project.title.toLowerCase().replace(/[^a-z0-9]/g, '-')}.git`,
          private: false
        },
        message: 'デモモード: リポジトリ作成をシミュレートしました'
      })
    }

    // 実際のSupabaseから取得
    const supabase = await createClient()
    
    const { data: project, error } = await supabase
      .from('projects')
      .select('*')
      .eq('id', id)
      .single()

    if (error || !project) {
      return NextResponse.json(
        { error: 'Project not found' },
        { status: 404 }
      )
    }

    // リポジトリ名を生成
    const finalRepoName = repoName || project.title.toLowerCase().replace(/[^a-z0-9]/g, '-')
    
    // GitHubリポジトリを作成
    const createResult = await createGitHubRepository(
      githubToken,
      finalRepoName,
      project.description || 'Generated by SaaS Factory'
    )

    if (!createResult.success) {
      return NextResponse.json(
        { error: createResult.error },
        { status: 400 }
      )
    }

    const repository = createResult.data

    // プロジェクトのファイルを準備
    const files: GitHubFile[] = []
    
    // README.md
    files.push({
      path: 'README.md',
      content: `# ${project.title}

${project.description}

## Features

${project.features || '- Coming soon'}

## Tech Stack

${project.tech_requirements || '- Next.js\n- React\n- TypeScript\n- Tailwind CSS'}

## Getting Started

\`\`\`bash
# Install dependencies
npm install

# Run development server
npm run dev

# Build for production
npm run build

# Start production server
npm start
\`\`\`

---

Generated by [SaaS Factory](https://saas-factory.com)
`
    })

    // package.json
    if (project.generated_code?.package_json) {
      files.push({
        path: 'package.json',
        content: JSON.stringify(project.generated_code.package_json, null, 2)
      })
    }

    // .gitignore
    files.push({
      path: '.gitignore',
      content: `# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
`
    })

    // 生成されたファイルを追加
    if (project.generated_code?.file_structure) {
      project.generated_code.file_structure.forEach((item: any) => {
        if (item.type === 'file' && item.content) {
          files.push({
            path: item.path,
            content: item.content
          })
        }
      })
    }

    // ファイルをアップロード
    const uploadResult = await uploadFilesToGitHub(
      githubToken,
      repository.owner.login,
      repository.name,
      files
    )

    if (!uploadResult.success) {
      console.error('Failed to upload some files:', uploadResult.error)
      // Continue anyway as the repository was created
    }

    // Supabaseのプロジェクトを更新
    const { error: updateError } = await supabase
      .from('projects')
      .update({
        repository_url: repository.html_url,
        updated_at: new Date().toISOString()
      })
      .eq('id', id)

    if (updateError) {
      console.error('Failed to update project:', updateError)
    }

    return NextResponse.json({
      success: true,
      repository: {
        name: repository.name,
        full_name: repository.full_name,
        html_url: repository.html_url,
        clone_url: repository.clone_url,
        private: repository.private
      },
      filesUploaded: files.length
    })

  } catch (error) {
    console.error('GitHub deploy error:', error)
    return NextResponse.json(
      { error: 'Failed to deploy to GitHub' },
      { status: 500 }
    )
  }
}